syntax = "proto3";

package omni.v1beta7;

import "omni/v1beta7/types/common.proto";
import "omni/v1beta7/types/quote.proto";

// Indicates that the's no valid quote corresponding to RFQ.
message NoQuoteEvent {

}

message QuoteEvent {
  oneof event {
    // Represents an updated quote received from the server in response to a quote request.
    Quote quote_updated = 1;
    // Indicates that the's no valid quote corresponding to RFQ.
    NoQuoteEvent no_quote = 2;
    // The service message to keep connection alive.
    KeepAlive keep_alive = 100;
    // Service message indicating that a request for quote has expired. Used only in WebSockets API.
    Unsubscribed unsubscribed = 101;
  }
}

message LimitOrderQuoteRequest {
  // Blockchain-specific address of bid asset.
  Address bid_asset_address = 1;

  // Blockchain-specific address of ask asset.
  Address ask_asset_address = 2;

  // The amount of bid asset the trader wants to pay, including all fees.
  string bid_units = 3;

  // The amount of ask asset the trader wants to get after all fees.
  string ask_units = 4;

  // The address of referrer that will receive the fees.
  Address referrer_address = 5;

  // The amount of fees required by the referrer in basis points (1/10000 or 0.01%)
  uint32 referrer_fee_bps = 6;

  // The protocol limits settlement methods in quotes to specified methods.
  // Different combinations of bid & ask chains might support different methods.
  // For Limit Orders only Escrow and HTLC settlement methods are supported.
  repeated SettlementMethod settlement_methods = 7;

  RequestSettlementParams settlement_params = 10;

}

message QuoteResponse {
  Quote quote = 1;
}

service QuoteGrpc {
  // Request for quote.
  //
  // The server sends the stream of quotes in response, so that each next quote overrides previous one.
  // This may occur either because the newer quote has better terms or because the older has expired.
  //
  // If there are no resolvers providing quotes for this request, empty stream is returned.
  // If there are no resolvers providing quotes after an old quote has expired, the server sends an empty
  // message (empty `quote_id` & other fields).
  //
  // The client is responsible for interrupting connection when not interested in further updates
  // (either when starting the trade or because of cancelling the request).
  rpc Quote (QuoteRequest) returns (stream QuoteEvent){}

  // Creates an artificial quote representing a limit order.
  rpc LimitOrderQuote (LimitOrderQuoteRequest) returns (QuoteResponse) {}

}
