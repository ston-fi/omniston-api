syntax = "proto3";

package omni.v1beta6;

import "omni/v1beta6/types/common.proto";
import "omni/v1beta6/types/swap.proto";

/////////////////////////////////////////////////////////////////
// The set of types for `QuoteGrpc.Quote` method.
/////////////////////////////////////////////////////////////////

// Additional parameters of RFQ related to settlement.
//
// Some parameters might be valid only in a subset of settlement methods on a subset of supported blockchains.
// These parameters might be omitted if corresponding settlement methods won't be used.
message RequestSettlementParams {
  // Max price slippage in basis points (0.01%).
  uint32 max_price_slippage_bps = 1;
  // Max number of outgoing messages supported by the wallet.
  //
  // For TON blockchain defaults to 4 if omitted.
  uint32 max_outgoing_messages = 2;
}

// Settlement parameters specific to `SWAP` settlement method.
message SwapSettlementParams {
  repeated SwapRoute routes = 1;
  // TODO: Add a separate destination for trade tracking and fee collection
}

// Settlement parameters specific to `ESCROW` settlement method.
//
// **UNSTABLE:** This is unstable API, it's subject to backward-incompatible changes.
message EscrowSettlementParams {
  // Address of escrow contract that enforces the swap.
  Address contract_address = 1;

  // Address of the resolver.
  Address resolver_address = 2;

  // Duration in seconds after the deposit of offer asset to complete the trade.
  // The trader can return the deposit as soon as the timeout elapses.
  uint64 resolve_timeout = 3;
}

// Settlement parameters specific to `HTLC` settlement method.
//
// **UNSTABLE:** This is unstable API, it's subject to backward-incompatible changes.
message HtlcSettlementParams {
  // Address of htlc contract that enforces the swap.
  Address contract_address = 1;

  // Address of the resolver.
  Address resolver_address = 2;

  // Duration in seconds after the deposit of offer asset to redeem the deposit by resolver.
  // The trader can return the deposit as soon as the timeout elapses.
  uint64 resolve_timeout = 3;
}

// A request for quote (RFQ) sent by the trader
message QuoteRequest {
  // Blockchain-specific address of offer asset.
  Address offer_asset_address = 1;

  // Blockchain-specific address of ask asset.
  Address ask_asset_address = 2;

  // Either the amount of offer asset or ask asset.
  oneof amount {
    // The amount of offer asset the trader wants to pay, including all fees.
    string offer_units = 3;
    // The amount of ask asset the trader wants to get after all fees.
    string ask_units = 4;
  }

  // The address of referrer that will receive the fees.
  Address referrer_address = 5;

  // The amount of fees required by the referrer in basis points (1/10000 or 0.01%)
  uint32 referrer_fee_bps = 6;

  // Supported methods of swap settlement.
  // The protocol limits settlement methods in quotes to specified methods.
  // Different combinations of offer & ask chains might support different methods.
  repeated SettlementMethod settlement_methods = 7;

  // Additional parameters of request related to settlement.
  RequestSettlementParams settlement_params = 10;
}

message Quote {
  // ID of the quote generated by the platform
  string quote_id = 1;

  // id of the resolver
  string resolver_id = 2;

  // Name of the resolver
  string resolver_name = 3;

  // Blockchain-specific address of offer asset.
  Address offer_asset_address = 4;

  // Blockchain-specific address of ask asset.
  Address ask_asset_address = 5;

  // The amount of offer asset the trader must pay, including all fees.
  string offer_units = 6;

  // The amount of ask asset the trader will get after all fees.
  string ask_units = 7;

  // The address of referrer that will receive the fees.
  Address referrer_address = 8;

  // The amount of fees that the referrer will get (in units of the asset specified in `referrer_fee_asset`).
  string referrer_fee_units = 9;

  // The amount of fees charged by the protocol (in units of the asset specified in `protocol_fee_asset`).
  string protocol_fee_units = 10;

  // The timestamp (UTC seconds) of Quote sent by resolver.
  uint64 quote_timestamp = 11;

  // Max timestamp (UTC seconds) of start of the trade.
  //
  // The start of the trade is defined as the reception of offer asset by the corresponding smart contract.
  // The resolver may still settle the trades started after this deadline has passed at own discretion.
  uint64 trade_start_deadline = 12;

  // Total gas budget required to perform the trade.
  //
  // This field if filled by Omniston service, resolvers may omit this field when generating the quote.
  string gas_budget = 13;

  // Estimated amount of gas units that will be spent to perform the trade.
  //
  // This field if filled by Omniston service, resolvers may omit this field when generating the quote.
  string estimated_gas_consumption = 14;

  // The asset of the fees that the referrer will get (the amount is specified in  `referrer_fee_units`).
  Address referrer_fee_asset = 15;

  // The asset of the fees charged by the protocol (the amount is specified in  `protocol_fee_units`).
  Address protocol_fee_asset = 16;

  // Additional parameters specific to settlement method.
  oneof params {
    SwapSettlementParams swap = 20;
    EscrowSettlementParams escrow = 21;
    HtlcSettlementParams htlc = 22;
  }
}
