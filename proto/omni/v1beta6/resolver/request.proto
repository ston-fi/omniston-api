syntax = "proto3";

package omni.v1beta6;

import "omni/v1beta6/types/common.proto";
import "omni/v1beta6/types/quote.proto";
import "omni/v1beta6/types/swap.proto";
import "omni/v1beta6/types/transaction.proto";

////////////////////////////////////////////////////////////////////
// Data structures
////////////////////////////////////////////////////////////////////

// The payload of connection request.
//
// The resolver signs the payload with specified key and sends it to the server in the form of `ConnectRequest`.
message ConnectPayload {
  // Timestamp of request.
  uint64 connect_timestamp = 1;

  // Address of contract holding resolver's stake that allows to participate in protocol.
  // The stake contract holds resolver's info, including list of authorized keys.
  string stake_address = 2;
}

////////////////////////////////////////////////////////////////////
// Resolver requests
////////////////////////////////////////////////////////////////////

// Signed connection request authenticating the resolver.
message ConnectRequest {
  // ProtoBuf-serialized `ConnectPayload`.
  bytes payload = 1;

  // Public key used by the signature.
  bytes public_key = 2;

  // Ed25519 signature of payload.
  bytes signature = 3;
}

// Resolver's parameters specific to `SWAP` settlement method
message ResolverSwapParams {
  repeated SwapRoute routes = 1;
}

// Resolver's parameters specific to `ESCROW` settlement method
message ResolverEscrowParams {
  // Address of the resolver that should receive tokens offered by the trader.
  Address resolver_offer_address = 1;

  // Address of the resolver that must send tokens asked by the trader.
  Address resolver_ask_address = 2;
}

// Resolver's parameters specific to `HTLC` settlement method
message ResolverHtlcParams {
  // Address of the resolver that should receive tokens offered by the trader in offer blockchain.
  Address resolver_offer_address = 1;

  // Address of the resolver that must send tokens asked by the trader in ask blockchain.
  Address resolver_ask_address = 2;
}

// The request to update swap quote by the resolver.
message UpdateQuoteRequest {
  // ID of request as specified by `QuoteRequestedEvent`.
  string rfq_id = 1;

  // Amount of `offer_asset_address` that will be exchanged by the trader
  string offer_units = 2;

  // Amount of `ask_asset_address` that will be received by the trader
  string ask_units = 3;

  // Max timestamp (UTC seconds) of start of the trade.
  //
  // The start of the trade is defined as the reception of offer asset by the corresponding smart contract.
  // The resolver may still settle the trades started after this deadline has passed at own discretion.
  uint64 trade_start_deadline = 4;

  // Parameters specific to settlement method.
  oneof params {
    ResolverSwapParams swap = 20;
    ResolverEscrowParams escrow = 21;
    ResolverHtlcParams htlc = 22;
  }
}

message InvalidateQuoteRequest {
  // ID of the quote as received from `QuoteAcceptedEvent`.
  string quote_id = 1;
}

// Requests from resolver.
message ResolverRequest {
  // These fields allow multiplexing over a single gRPC stream by matching
  // the requests and corresponding replies sent as `ResolverRequest` & `ResolverEvent`.
  oneof mux {
    // The unique ID of the request generated by resolver.
    //
    // This field can be used to match requests and corresponding replies sent as `ResolverEvent`.
    //
    // The server doesn't validate contents of this field and injects it in the `reply_to` field as is.
    // It's recommended to use monotonically increasing atomic integer starting from 1
    // to avoid difficult to diagnose client-side errors.
    uint64 seqno = 1;
    // Must contain the `seqno` specified in `ResolverEvent` if the event is a reply to a request.
    // Otherwise this field must be empty.
    uint64 reply_to = 2;
  }

  // One of resolver's requests.
  oneof request {
    ConnectRequest connect = 10;
    UpdateQuoteRequest update_quote = 11;
    InvalidateQuoteRequest invalidate_quote = 12;
  }
}
