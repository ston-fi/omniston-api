syntax = "proto3";

package omni.v1beta6;

import "omni/v1beta6/types/common.proto";
import "omni/v1beta6/types/quote.proto";

// Indicates that the's no valid quote corresponding to RFQ.
message NoQuoteEvent {

}

// Server sends acknowledge immediately upon reception of QuoteRequest and generation of `rfq_id`.
message QuoteRequestAck {
  // ID of RFQ generated by the server (SHA-256 hex string).
  string rfq_id = 1;
}

message QuoteEvent {
  oneof event {
    // Represents an updated quote received from the server in response to a quote request.
    Quote quote_updated = 1;
    // Indicates that the's no valid quote corresponding to RFQ.
    NoQuoteEvent no_quote = 2;
    // Server sends acknowledge immediately upon reception of QuoteRequest and generation of `rfq_id`.
    QuoteRequestAck ack = 3;
    // The service message to keep connection alive.
    KeepAlive keep_alive = 100;
    // Service message indicating that a request for quote has expired. Used only for WebSocket API.
    Unsubscribed unsubscribed = 101;
  }
}

service QuoteGrpc {
  // Request for quote.
  //
  // The server sends the stream of quotes in response, so that each next quote overrides previous one.
  // This may occur either because the newer quote has better terms or because the older has expired.
  //
  // If there are no resolvers providing quotes for this request, empty stream is returned.
  // If there are no resolvers providing quotes after an old quote has expired, the server sends an empty
  // message (empty `quote_id` & other fields).
  //
  // The client is responsible for interrupting connection when not interested in further updates
  // (either when starting the trade or because of cancelling the request).
  rpc Quote (QuoteRequest) returns (stream QuoteEvent){}
}
