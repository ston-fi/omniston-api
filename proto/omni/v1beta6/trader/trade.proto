syntax = "proto3";

package omni.v1beta6;

import "omni/v1beta6/types/common.proto";

//////////////////////////////////////////////
// Chunks, steps & routes statuses
//////////////////////////////////////////////

enum SwapChunkResult {
  SWAP_CHUNK_RESULT_PROCESSING = 0;
  SWAP_CHUNK_RESULT_FILLED = 1;
  SWAP_CHUNK_RESULT_ABORTED = 2;
}

message SwapChunkStatus {
  string protocol = 1;
  // Address of the contract that processes this chunk.
  //
  // Generally, this address receives offer tokens.
  // More specifically, it might be the address of a protocol or liquidity pool.
  Address target_address = 2;
  string offer_units = 3;
  string expected_ask_units = 4;
  string actual_ask_units = 5;
  SwapChunkResult result = 6;
  // Hash of the transaction that performs swapping of the chunk.
  string tx_hash = 7;
}

message SwapStepStatus {
  repeated SwapChunkStatus chunks = 1;
}

message SwapRouteStatus {
  repeated SwapStepStatus steps = 1;
}

//////////////////////////////////////////////
// Trade status
//////////////////////////////////////////////


enum TradeResult {
  TRADE_RESULT_UNKNOWN = 0;
  TRADE_RESULT_FULLY_FILLED = 1;
  TRADE_RESULT_PARTIALLY_FILLED = 2;
  TRADE_RESULT_ABORTED = 3;
}

// A request to track the status of specific trade
message TrackTradeRequest {
  // ID of the quote
  string quote_id = 1;

  // The address of trader's wallet that initiated transaction
  Address trader_wallet_address = 2;

  // Hash of tx outgoing from the wallet
  string outgoing_tx_hash = 3;
}

// Waiting for the trader to initiate the trade.
// Getting this status means that the transaction initiating the trade hasn't appeared yet.
message AwaitingTransfer {

}

// Initial transaction found, waiting for its mining.
message Transferring {
}

// Awaiting swap transactions in the DEX protocols.
//
// Specific to `SWAP` settlement method.
message Swapping {

  // Info about partial filling of the trade.
  repeated SwapRouteStatus routes = 2;
}

// Awaiting resolver's deposit.
//
// Specific to `ESCROW` & `HTLC` settlement.
//
// **UNSTABLE:** This is unstable API, it's subject to backward-incompatible changes.
message AwaitingFill {
  // TODO: Info about partial fills of Escrow/HTLC.
}

// Specific to `HTLC` settlement. Resolver's deposit is claimable.
//
// **UNSTABLE:** This is unstable API, it's subject to backward-incompatible changes.
message ClaimAvailable {
  // Address of HTLC contract with claimable deposit.
  Address contract_address = 1;

  // Index of deposit within HTLC contract with claimable deposit.
  uint64 deposit_index = 2;
}

// Specific to `ESCROW` & `HTLC` settlement. Deposit timeout has expired, need to refund it.
//
// **UNSTABLE:** This is unstable API, it's subject to backward-incompatible changes.
message RefundAvailable {
  // Address of escrow or HTLC contract that enforces the swap.
  Address contract_address = 1;

  // Index of deposit within escrow or HTLC contract with refundable deposit.
  uint64 deposit_index = 2;
}

// The transactions with incoming funds found, waiting for them to mine.
message ReceivingFunds {
  // Specific to `SWAP` settlement. Info about chunks of the trade.
  repeated SwapRouteStatus routes = 1;
}

// The trade has completed (fully or partially filled or fully aborted)
message TradeSettled {
  // Result of the trade
  TradeResult result = 1;

  // Specific to `SWAP` settlement. Info about partial filling of the trade.
  repeated SwapRouteStatus routes = 2;
}

message TradeStatus {
  oneof status {
    // Waiting for the trader to initiate the trade.
    AwaitingTransfer awaiting_transfer = 1;
    // Initial transaction found, waiting for transfer of funds to complete.
    Transferring transferring = 2;

    // Awaiting swap transactions in the DEX protocols.
    Swapping swapping = 11;
    // Awaiting resolver's deposit.
    AwaitingFill awaiting_fill = 12;

    // Specific to `HTLC` settlement. Resolver's deposit is claimable.
    ClaimAvailable claim_available = 21;
    // Specific to `ESCROW` & `HTLC` settlement. Deposit timeout has expired, need to refund it
    RefundAvailable refund_available = 22;

    // The transaction with incoming funds found, waiting for it to mine.
    ReceivingFunds receiving_funds = 31;

    // The trade has completed (fully or partially filled or fully aborted)
    TradeSettled trade_settled = 91;

    // The service message to keep connection alive
    KeepAlive keep_alive = 100;
    // Service message indicating that a request for state has expired. Used only for WebSocket API
    Unsubscribed unsubscribed = 101;
  }

  // Timestamp (UTC seconds) when outgoing transfer has been detected.
  //
  // This field contains zero until the transfer has been detected.
  uint64 transfer_timestamp = 110;

  // Timestamp (UTC seconds) of completion of the trade.
  //
  // This field contains zero until the transfer has been detected.
  // For non-settled trades this field contains estimated timestamp of trade completion.
  // For settled trades this field contains the exact timestamp of last transaction of the trade.
  uint64 estimated_finish_timestamp = 111;
}

service TradeGrpc {
  // Request to track settling of the trade
  //
  // The server immediately sends current status in response and then all updates to the status.
  //
  // The server only closes the stream in case of errors. If the stream is interrupted or closed by the server,
  // the client might reconnect to get further updates.
  //
  // The client should close the stream if it's not interested in further updates.
  rpc Track (TrackTradeRequest) returns (stream TradeStatus){}
}
